<!-- Module User's Guide -->

<chapter>
	<chapterinfo>
	<revhistory>
		<revision>
		<revnumber>$Revision: 3926 $</revnumber>
		<date>$Date: 2008-03-11 18:03:39 +0100 (Tue, 11 Mar 2008) $</date>
		</revision>
	</revhistory>
	</chapterinfo>
	<title>User's Guide</title>
	
	<section>
	<title>Overview</title>
	<para>
	The dialog module provides dialog awareness to &ser; proxy. Its 
	functionality is to keep trace of the current dialogs, to offer information
	about them (like how many dialogs are active). The module exports no 
	functions that could be used directly from scripts.
	</para>
	<para>
	The module, via an internal API, also provide the foundation to build on 
	top of it more complex dialog-based functionalities via other &ser; 
	modules.
	</para>
	</section>

	<section>
	<title>How it works</title>
	<para>
	To create the dialog associated to an initial request, the flag 
	<quote>dlg_flag</quote> (<xref linkend="dlg-flag-id">) must be set before
	creating the corresponding transaction.
	</para>
	<para>
	The dialog is automatically destroyed when a <quote>BYE</quote> is 
	received. In case of no <quote>BYE</quote>, the dialog lifetime is 
	controlled via the default timeout (see <quote>default_timeout</quote>
	 - <xref linkend="default-timeout-id">) and custom timeout (see 
	 <quote>timeout_avp</quote> - <xref linkend="timeout-avp-id">). The 
	dialog timeout is reset each time a sequential request passes.
	</para>
	</section>


	<section>
	<title>Dependencies</title>
	<section>
		<title>&ser; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>TM</emphasis> - Transaction module
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>RR</emphasis> - Record-Route module
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>


	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &ser; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>


	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>enable_stats</varname> (integer)</title>
		<para>
		If the statistics support should be enabled or not. Via statistic 
		variables, the module provide information about the dialog processing.
		Set it to zero to disable or to non-zero to enable it.
		</para>
		<para>
		<emphasis>
			Default value is <quote>1 (enabled)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>enable_stats</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "enable_stats", 0)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The size of the hash table internally used to keep the dialogs. A 
		larger table is much faster but consumes more memory. The hash size
		must be a power of 2 number.
		</para>
		<para>
		IMPORTANT: If dialogs' information should be stored in a database, 
		a constant hash_size should be used, otherwise the restored process 
		will not take place. If you really want to modify the hash_size you 
		must delete all table's rows before restarting openser.
		</para>
		<para>
		<emphasis>
			Default value is <quote>4096</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "hash_size", 1024)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>rr_param</varname> (string)</title>
		<para>
		Name of the Record-Route parameter to be added with the dialog cookie.
		It is used for fast dialog matching of the sequential requests.
		</para>
		<para>
		<emphasis>
			Default value is <quote>did</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>rr_param</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "rr_param", "xyz")
...
</programlisting>
		</example>
	</section>

	<section id="dlg-flag-id">
		<title><varname>dlg_flag</varname> (integer)</title>
		<para>
		Flag to be used for marking if a dialog should be constructed for the
		current request (make sense only for initial requests).
		</para>
		<para>
		<emphasis>
			Default value is <quote>none</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlg_flag</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_flag", 4)
...
</programlisting>
		</example>
	</section>

	<section id="timeout-avp-id">
		<title><varname>timeout_avp</varname> (string)</title>
		<para>
		The specification of an AVP to contain a custom timeout (in seconds)
		for the dialog. It may be used only in a request 
		(initial or sequential) context 
		</para>
		<para>
		<emphasis>
			Default value is <quote>none</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timeout_avp</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "timeout_avp", "$avp(i:10)")
...
</programlisting>
		</example>
	</section>

	<section id="default-timeout-id">
		<title><varname>default_timeout</varname> (integer)</title>
		<para>
		The default dialog timeout (in seconds) if no custom one is set.
		</para>
		<para>
		<emphasis>
			Default value is <quote>43200 (12 hours)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>default_timeout</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "default_timeout", 21600)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dlg_extra_hdrs</varname> (string)</title>
		<para>
		A string containing the extra headers (full format, with EOH)
		to be added in the requests generated by the module (like BYEs).
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlf_extra_hdrs</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_extra_hdrs", "Hint: credit expired\r\n")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dlg_match_mode</varname> (integer)</title>
		<para>
		How the seqential requests should be matched against the known dialogs.
		The modes are a combination between matching based on a cookie (DID)
		stored as cookie in Record-Route header and the matching based on SIP 
		elements (as in RFC3261).
		</para>
		<para>
		The supported modes are:
		</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>0 - DID_ONLY</emphasis> - the match is done 
				exclusivly based on DID;
			</para></listitem>
			<listitem><para>
				<emphasis>1 - DID_FALLBACK</emphasis> - the match is first 
				tried based on DID and if not present, it will fallback to
				SIP matching;
			</para></listitem>
			<listitem><para>
				<emphasis>2 - DID_NONE</emphasis> - the match is done 
				exclusivly based on SIP elements; no DID information is added 
				in RR.
			</para></listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <quote>0 (DID_ONLY)</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dlg_match_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "dlg_match_mode", 1)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		If you want to store the information about the dialogs in a database 
		a database url must be specified.
		</para>
		<para>
		<emphasis>
			Default value is <quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_url", "&exampledb")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>db_mode</varname> (integer)</title>
		<para>
		Describe how to push into the DB the dialogs' information from memory.
		</para>
		<para>
		The supported modes are:
		</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>0 - NO_DB</emphasis> - the memory content is not
				flushed into DB;
			</para></listitem>
			<listitem><para>
				<emphasis>1 - REALTIME</emphasis> - any dialog information 
				changes will be reflected into the database immediatly.
			</para></listitem>
			<listitem><para>
				<emphasis>2 - DELAYED</emphasis> - the dialog information 
				changes will be flushed into DB periodically, based on a
				timre routine.
			</para></listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <quote>0</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_mode</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_mode", 1)
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>db_update_period</varname> (integer)</title>
		<para>
			The interval (seconds) at which to update dialogs' information if you chose to store the dialogs' info at a given interval.
			A too short interval will generate intensiv database operations, a too large one will not notice short dialogs.
		</para>
		<para>
		<emphasis>
			Default value is <quote>60</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_update_period</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "db_update_period", 120)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>table_name</varname> (string)</title>
		<para>
		If you want to store the information about the dialogs in a 
		database a table name must be specified.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dialog</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>table_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "table_name", "my_dialog")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>callid_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' callid.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callid</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>callid_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "callid_column", "callid_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_uri_column</varname> (string)</title>
		<para>
			The column's name in the database to store the caller's 
			sip address.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_uri</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_uri_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_uri_column", "from_uri_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_tag_column</varname> (string)</title>
		<para>
			The column's name in the database to store the From tag from 
			the Invite request.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_tag</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>from_tag_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "from_tag_column", "from_tag_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>to_uri_column</varname> (string)</title>
		<para>
			The column's name in the database to store the calee's sip address.
		</para>
		<para>
		<emphasis>
			Default value is <quote>to_uri</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_uri_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_uri_column", "to_uri_c_name")
...
</programlisting>
		</example>
	</section>


	<section>
		<title><varname>to_tag_column</varname> (string)</title>
		<para>
			The column's name in the database to store the To tag from 
			the 200 OK response to the Invite request, if present.
		</para>
		<para>
		<emphasis>
			Default value is <quote>to_tag</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_tag_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_tag_column", "to_tag_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>caller_cseq_column</varname> (string)</title>
		<para>
			The column's name in the database to store the cseq from caller
			side.
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_cseq</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>caller_cseq_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "caller_cseq_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>callee_cseq_column</varname> (string)</title>
		<para>
			The column's name in the database to store the cseq from callee
			side.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_cseq</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>callee_cseq_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "callee_cseq_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>caller_route_column</varname> (string)</title>
		<para>
			The column's name in the database to store the route records from
			caller side (proxy to caller).
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_route_set</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>caller_route_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "caller_route_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>callee_route_column</varname> (string)</title>
		<para>
			The column's name in the database to store the route records from
			callee side (proxy to callee).
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_route_set</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>to_route_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "to_route_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>caller_contact_column</varname> (string)</title>
		<para>
			The column's name in the database to store the caller's contact 
			uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>caller_contact_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "caller_contact_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>callee_contact_column</varname> (string)</title>
		<para>
			The column's name in the database to store the callee's contact 
			uri.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>callee_contact_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "callee_contact_column", "column_name")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>caller_sock_column</varname> (string)</title>
		<para>
			The column's name in the database to store the information about 
			the local interface receiving the traffic from caller.
		</para>
		<para>
		<emphasis>
			Default value is <quote>caller_sock</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>caller_sock_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "caller_sock_column", "column_name")
...
</programlisting>
		</example>
	</section>

<section>
		<title><varname>callee_sock_column</varname> (string)</title>
		<para>
			The column's name in the database to store information about the 
			local interface receiving the traffic from callee.
		</para>
		<para>
		<emphasis>
			Default value is <quote>callee_contact</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>callee_sock_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "callee_sock_column", "column_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>h_id_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' 
			hash id information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>hash_id</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>h_id_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "h_id_column", "hash_id_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>h_entry_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' hash 
			entry information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>hash_entry</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>h_entry_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "h_entry_column", "h_entry_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>state_column</varname> (string)</title>
		<para>
			The column's name in the database to store the 
			dialogs' state information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>state</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>state_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "state_column", "state_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>start_time_column</varname> (string)</title>
		<para>
			The column's name in the database to store the 
			dialogs' start time information.
		</para>
		<para>
		<emphasis>
			Default value is <quote>start_time</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>start_time_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "start_time_column", "start_time_c_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>timeout_column</varname> (string)</title>
		<para>
			The column's name in the database to store the dialogs' timeout.
		</para>
		<para>
		<emphasis>
			Default value is <quote>timeout</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>timeout_column</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialog", "timeout_column", "timeout_c_name")
...
</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported Functions</title>
	<para>
		There are no exported functions that could be used in scripts.
	</para>
	</section>


	<section>
	<title>Exported statistics</title>
		<section>
			<title><varname>active_dialogs</varname></title>
			<para>
			Returns the number of current active dialogs (may be confirmed or
			not).
			</para>
		</section>
		<section>
			<title><varname>early_dialogs</varname></title>
			<para>
			Returns the number of early dialogs.
			</para>
		</section>		<section>
			<title><varname>processed_dialogs</varname></title>
			<para>
			Returns the total number of processed dialogs (terminated, 
			expired or active) from the startup.
			</para>
		</section>
		<section>
			<title><varname>expired_dialogs</varname></title>
			<para>
			Returns the total number of expired dialogs from the startup.
			</para>
		</section>
		<section>
			<title><varname>failed_dialogs</varname></title>
			<para>
			Returns the number of failed dialogs.
			</para>
		</section>
	</section>


	<section>
	<title>Exported MI Functions</title>

		<section>
			<title><varname>dlg_list</varname></title>
			<para>
			It returns a listing of all dialogs (calls).
			</para>
		<para>
		Name: <emphasis>dlg_list</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_list:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>

		<section>
			<title><varname>dlg_end_dlg</varname></title>
			<para>
			Terminates an ongoing dialog by sending BYE in both directions.
			</para>
		<para>
		Name: <emphasis>dlg_end_dlg</emphasis>
		</para>
		<para>Parameters:</para>
		<itemizedlist>
			<listitem><para>
				<emphasis>h_entry</emphasis> - hash entry of the dialog in the
				internal dialog table
			</para></listitem>
			<listitem><para>
				<emphasis>h_id</emphasis> - hash id of the dialog on the hash
				entry
			</para></listitem>
			<listitem><para>
				<emphasis>extra_hdrs</emphasis> - (optional) string containg 
				extra headers (full format) to be added to the BYE requests.
			</para></listitem>
		</itemizedlist>
		<para>
		The values for the h_entry and h_id can be get via the dlg_list
		MI command.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:dlg_end_dlg:_reply_fifo_file_
		342
		56
		_empty_line_
		</programlisting>
		</section>

	</section>


	<section>
	<title>Exported pseudo-variables</title>

		<section>
			<title><varname>$DLG_count</varname></title>
			<para>
			Returns the number of current active dialogs (may be confirmed or
			not).
			</para>
		</section>

		<section>
			<title><varname>$DLG_status</varname></title>
			<para>
			Returns the status of the dialog corresponding to the processed 
			sequential request. This PV will be available only for sequential
			requests, after doing loose_route().
			</para>
			<para>
			Value may be:
			</para>
			<itemizedlist>
				<listitem><para>
					<emphasis>NULL</emphasis> - Dialog not found.
				</para></listitem>
				<listitem><para>
					<emphasis>3</emphasis> - Confirmed by a final reply but 
					no ACK received yet.
				</para></listitem>
				<listitem><para>
					<emphasis>4</emphasis> - Confirmed by a final reply and
					ACK received.
				</para></listitem>
				<listitem><para>
					<emphasis>5</emphasis> - Dialog ended.
				</para></listitem>
			</itemizedlist>
		</section>

		<section>
			<title><varname>$DLG_lifetime</varname></title>
			<para>
			Returns the duration (in seconds) of the dialog corresponding to 
			the processed sequential request. The duration is calculated from 
			the dialog confirmation and the current moment. This PV will be 
			available only for sequential requests, after doing loose_route().
			</para>
			<para>
			NULL will be returned if there is no dialog for the request.
			</para>
		</section>

	</section>



</chapter>

<!-- Keep this element at the end of the file
Local Variables:
sgml-parent-document: ("dialog.sgml" "Book" "chapter")
End:
-->
